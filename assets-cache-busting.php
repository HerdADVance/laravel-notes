
Versioning/Cache Busting
==========================

Many developers suffix their compiled assets with a timestamp or unique token to force browsers to load the fresh assets instead of serving stale copies of the code.

Mix can automatically handle this for you using the version method.

The version method will append a unique hash to the filenames of all compiled files, allowing for more convenient cache busting:

	<script>
		mix.js('resources/js/app.js', 'public/js')
	    	.version();
	</script>

After generating the versioned file, you won't know the exact filename so use Laravel's global mix function within your views to load the appropriately hashed asset.

The mix function will automatically determine the current name of the hashed file:

	<script src="{{ mix('/js/app.js') }}"></script>

Because versioned files are usually unnecessary in development, you can instruct the versioning process to only run during <? npm run prod ?>.

	<script>
		mix.js('resources/js/app.js', 'public/js');

		if (mix.inProduction()) {
		    mix.version();
		}
	</script>

If your Mix compiled assets are deployed to a CDN separate from your app, you'll need to change the base URL generated by the mix function.

You can do this by adding a mix_url configuration option to your app's config/app.php file.

	<? 'mix_url' => env('MIX_ASSET_URL', null) ?>

After configuring the Mix URL, the mix function will prefix the configured URL when generating URL's to assets.



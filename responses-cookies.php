
Attaching Cookies to Responses
=============================

You can attach a cookie to an outgoing Response instance using the cookie method. You should pass the name, value, and number of minutes the cookie should be considered valid:

<?
	// Returning a cookie with basic info
	return response('Hello World')->cookie(
	    'name', 'value', $minutes
	);

	// Returning a cookie with more arguments that are used less frequently
	return response('Hello World')->cookie(
    	'name', 'value', $minutes, $path, $domain, $secure, $httpOnly
	);
?>

If you'd like to ensure that a cookie is sent with the outgoing response but don't yet have an instance of that response, use the Cookie facade to "queue" cookies for attachment to the response when it is sent.

The queue method accepts the arguments needed to create a cookie isntance. These cookies will be attached to the outgoing response before it's sent to the browser.

<?
	use Illuminate\Support\Facades\Cookie;

	Cookie::queue('name', 'value', $minutes);
?>

To generate a Symfony\Component\HttpFoundation\Cookie instance that can be attached to a response instance at a later time, use the global cookie helper. 

This cookie won't be sent back to the client unless it's attached to a response instance.

<?
	// creating the cookie with Symfony's global cookie helper
	$cookie = cookie('name', 'value', $minutes);

	return response('Hello World')->cookie($cookie);
?>

To remove a cookie by expiring it, use the withoutCookie method of an outgoing response:

<?
	return response('Hello World')->withoutCookie('name');

	// or use the cookie facade if you don't yet have an instance of the outgoing response
	Cookie::queue(Cookie::forget('name'));
?>

By default, all cookies generated by Laravel are encrypted and signed so they can't be modified or read by the client. To disable encryption for a subset of cookies generated by your app, you can use the $except property of the EncryptCookies middleware:

<?
	protected $except = [
    	'cookie_name',
	];
?>
